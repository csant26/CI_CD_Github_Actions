name: CI CD Pipeline Test

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]
    workflow_dispatch:
    

env:
    DOTNET_VERSION: '9.0'
    BUILD_CONFIGURATION: 'Release'
    APP_NAME: 'CICDPractice'
    REGISTRY: ${{secrets.DOCKER_REGISTRY}}
    IMAGE_NAME: ${{secrets.DOCKER_IMAGENAME}}

jobs:

    #Job A
    build-test:
        
        runs-on: ubuntu-latest

        strategy:
            matrix:
                os: [windows-latest]
                dotnet: [9.0]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            
            - name: Caching the packages
              uses: actions/cache@v4
              with:
                path: ~/.nuget/packages
                key: nuget-${{runner.os}}-${{hashFiles('**/*.csproj')}}


            - name: Setup SDK
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: ${{matrix.dotnet}}

            - name: Restoring dependencies
              run: dotnet restore --disable-parallel

            - name: Build
              run: dotnet build --no-restore -c ${{env.BUILD_CONFIGURATION}}

            - name: Test + Coverage
              run: dotnet test --no-build -c ${{env.BUILD_CONFIGURATION}} --logger "trx;LogFileName=test-results.trx" -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura

            - name: Upload Test Results
              uses: actions/upload-artifact@v4
              with:
                name: Test Resuls-${{runner.os}}
                path: '**/test-results.trx' 
            
            - name: Upload Coverage Results
              uses: actions/upload-artifact@v4
              with:
                name: Coverage Result-${{runner.os}}
                path: '**/coverage-results.xml'

    #Job B
    publish-artifact:
        needs: build-test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout for upload artifact
              uses: actions/checkout@v4

            - name: Setup .NET SDK
              uses: actions/setup-dotnet@v4
              with:
                    dotnet-version: ${{env.DOTNET_VERSION}}

            - name: Publish results
              run: dotnet publish -c ${{env.BUILD_CONFIGURATION}} -o ./publish

            - name: Upload the published 
              uses: actions/upload-artifact@v4
              with:
                name: published artifact
                path: ./publish

    #Job C
    docker-build:
        needs: build-test
        if: github.ref=='refs/heads/main' 
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code for Docker
              uses: actions/checkout@v4

            - name: Login to the registry
              uses: docker/login-action@v3
              with:
                registry: ${{env.REGISTRY}}
                username: ${{secrets.REG_USERNAME}} 
                password: ${{secrets.REG_PASSWORD}}

            - name: Build Image
              run: |
                  docker build -f Dockerfile -t ${{env.IMAGE_NAME}}:latest -t ${{env.IMAGE_NAME}}:${{github.sha}} .

            - name: Push Image
              run: |
                  docker push ${{env.IMAGE_NAME}}:latest
                  docker push ${{env.IMAGE_NAME}}:${{github.sha}}

    #Job D 
    smoke-test:
        needs: publish-artifact
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code for Smoke test
              uses: actions/checkout@v4

            - name: Setup the SDK
              uses: actions/setup-dotnet@v4
              with:
                    dotnet-version: ${{env.DOTNET_VERSION}}

            - name: Download the published artifact
              uses: actions/download-artifact@v4
              with:
                   name: published artifact
                   path: ./publish

            - name: Run application
              run: dotnet ./publish/${{env.APP_NAME}}.dll --urls http://localhost:5000 & sleep 10

            - name: Health check
              run: curl --fail http://localhost:5000/healthz

            - name: Stop the application
              run: pkill -f "${{env.APP_NAME}}"






        